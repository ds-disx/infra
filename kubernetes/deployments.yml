apiVersion: apps/v1
kind: Deployment
metadata:
  name: disx-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: disx-db
  template:
    metadata:
      labels:
        app: disx-db
    spec:
      containers:
      - name: disx-db
        image: postgres:latest
        ports:
        - containerPort: 3011
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: PGPORT
          value: "3011"
---
apiVersion: v1
kind: Service
metadata:
  name: disx-db
spec:
  selector:
    app: disx-db
  ports:
    - protocol: TCP
      port: 3011
      targetPort: 3011
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: disx-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: disx-service
  template:
    metadata:
      labels:
        app: disx-service
    spec:
      containers:
      - name: disx-service
        image: ghcr.io/ds-disx/disx-service:latest
        ports:
        - containerPort: 3010
---
apiVersion: v1
kind: Service
metadata:
  name: disx-service
spec:
  selector:
    app: disx-service
  ports:
    - protocol: TCP
      port: 3010
      targetPort: 3010
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: ghcr.io/ds-disx/disx-frontend:latest
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: nginx:latest
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx/
          readOnly: true
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    events {}

    http {
        server {
            listen 8080;

            location /disxs {
                proxy_pass http://disx-service:3010/disxs;
            } 
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
spec:
  selector:
    app: api-gateway
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP


